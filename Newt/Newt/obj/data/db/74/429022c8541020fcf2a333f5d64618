// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
/// <summary>
/// Computes lighting prepass from spot lights.
/// </summary>
class DeferredSpotLighting : DeferredLightingBase
{
    compose BRDFDiffuseBase brdfDiffuse = stage;
    compose BRDFSpecularBase brdfSpecular = stage;

    struct SpotLightInfo
    {
        float3 vDirectionVS;
        float intensity;
        float3 vPositionVS;
        float spotFieldAngle;
        float3 color;
        float spotBeamAngle;
        float range;
    };

    cbuffer LightData
    {
        [Link("LightingPrepassRenderer.SpotLightInfos")]
        SpotLightInfo SpotLightInfos[1];
    }

    override float4 ComputeLighting(float3 positionVS, float3 normalVS, float3 eyeVS)
    {
        float4 lighting = float4(0,0,0,0);

        SpotLightInfo lightInfo = SpotLightInfos[0];
        float3 dirToLight = lightInfo.vPositionVS - positionVS;
        float lightDistance = length(dirToLight);
        dirToLight /= lightDistance;
        float3 lightDir = normalize(lightInfo.vDirectionVS);
        float fieldAngle = lightInfo.spotFieldAngle;
        float beamAngle = lightInfo.spotBeamAngle;

        // angle attenuation
        float factor = smoothstep(fieldAngle, beamAngle, -dot(dirToLight, lightDir));

        // distance attenuation
        float dr = max(lightDistance - lightInfo.range, 0)/lightInfo.range + 1;
        factor /= dr*dr;

        float3 lightColor = factor * lightInfo.color; // pow(lightInfo.color,2.2);

        // Compute Diffuse Lighting
        float3 diffuseLighting = lightInfo.intensity * brdfDiffuse.ComputeDiffuseLighting(lightColor, dirToLight, normalVS, eyeVS);

        // Compute Specular Lighting
        float3 specularLighting = lightInfo.intensity * brdfSpecular.ComputeSpecularLighting(lightColor, dirToLight, normalVS, eyeVS);

        // To reduce bandwidth we don't store 2 x (RGBDiffuse + RGBSpecular), we store only the RGBDiffuse + Utilities.Luminance(RGBSpecular)
        // Luminance(lighting.Specular)
        lighting += float4(diffuseLighting, Utilities.Luminance(specularLighting));
        
        return lighting;
    }
};