// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
/// <summary>
/// Computes per-pixel specular shading.
/// </summary>
class ShadingSpecularPerPixel : ShadingPerPixel
{
    compose BRDFSpecularBase brdfSpecular = stage;
    compose AlbedoSpecularBase albedoSpecularBase = stage;
    
    override float3 ComputeSpecularAlbedo()
    {
        return albedoSpecularBase.SpecularAlbedo();
    }

    override float3 ComputeSpecularInfluence(float3 albedo, int lightIndex)
    {
        float3 lightDirection = normalize(GetDirectionToLight(lightIndex));
        float3 lightColor = LightColorsWithGamma[lightIndex];
        float lightIntensity = LightIntensities[lightIndex];
        return lightIntensity * brdfSpecular.ComputeSpecularColor(albedo, lightDirection, streams.ShadingNormal, streams.ShadingEye) * brdfSpecular.ComputeSpecularLighting(lightColor, lightDirection, streams.ShadingNormal, streams.ShadingEye);
    }
};