<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Paradox.Effects.Modules</name>
    </assembly>
    <members>
        <member name="T:SiliconStudio.ParadoxVersion">
            <summary>
            Internal version used to identify Paradox version.
            </summary>
            <remarks>
            Note: When modifying the version here, it must be modified also in the Paradox.pdxpkg 
            </remarks>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAssemblyAsText">
            <summary>
            The .NET current assembly version as text, not including pre-release (alpha, beta...) information.
            </summary>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAsText">
            <summary>
            The Store current version as text, including pre-release (alpha, beta...) information
            </summary>
            <remarks>
            Version number as described in http://docs.nuget.org/docs/reference/versioning
            When using pre-release (alpha, beta, rc...etc.) and because the order of the release is in alphabetical order,
            please use a double digit like alpha00 alpha01...etc. in order to make sure that we will follow the correct
            order for the versions.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Images.ImageEffectBase">
            <summary>
            Post effect base class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.#ctor(SiliconStudio.Paradox.Effects.Images.ImageEffectContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Images.ImageEffectBase"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.SetInput(System.Int32,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets an input texture
            </summary>
            <param name="slot">The slot.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.ResetInputs">
            <summary>
            Resets the input textures.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.SetOutput(SiliconStudio.Paradox.Graphics.RenderTarget,SiliconStudio.Paradox.Graphics.DepthStencilBuffer)">
            <summary>
            Sets the render target output.
            </summary>
            <param name="view">The render target output view.</param>
            <param name="depthStencilBuffer">The depth stencil buffer.</param>
            <exception cref="T:System.ArgumentNullException">view</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.SetOutput(SiliconStudio.Paradox.Graphics.RenderTarget[])">
            <summary>
            Sets the render target outputs.
            </summary>
            <param name="views">The render target output views.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.SetOutput(SiliconStudio.Paradox.Graphics.DepthStencilBuffer,SiliconStudio.Paradox.Graphics.RenderTarget[])">
            <summary>
            Sets the render target outputs.
            </summary>
            <param name="depthStencilBuffer">The depth stencil buffer.</param>
            <param name="views">The render target output views.</param>
            <returns>PostEffectBase.</returns>
            <exception cref="T:System.ArgumentNullException">views</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.Draw(System.String)">
            <summary>
            Draws a full screen quad using iterating on each pass of this effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.PreDrawCore(System.String)">
            <summary>
            Prepare call before <see cref="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.DrawCore"/>.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.PostDrawCore">
            <summary>
            Posts call after <see cref="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.DrawCore"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.DrawCore">
            <summary>
            Draws this post effect for a specific pass, implementation dependent.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.GetInput(System.Int32)">
            <summary>
            Gets an input texture by the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Texture.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.GetSafeInput(System.Int32)">
            <summary>
            Gets a non-null input texture by the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Texture.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.GetOutput(System.Int32)">
            <summary>
            Gets an output render target for the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>RenderTarget.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.GetSafeOutput(System.Int32)">
            <summary>
            Gets an non-null output render target for the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>RenderTarget.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.Enabled">
            <summary>
            Gets or sets a value indicating whether this post effect is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.Assets">
            <summary>
            Gets the <see cref="T:SiliconStudio.Core.Serialization.Assets.AssetManager"/>.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.InputCount">
            <summary>
            Gets the number of input textures.
            </summary>
            <value>The input count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectBase.OutputCount">
            <summary>
            Gets the number of output render target.
            </summary>
            <value>The output count.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Images.ImageEffectBaseExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Effects.Images.ImageEffectBase"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBaseExtensions.SetInput(SiliconStudio.Paradox.Effects.Images.ImageEffectBase,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets an input texture
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBaseExtensions.SetInput(SiliconStudio.Paradox.Effects.Images.ImageEffectBase,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets two input textures
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
            <param name="texture2">The texture2.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectBaseExtensions.SetInput(SiliconStudio.Paradox.Effects.Images.ImageEffectBase,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets two input textures
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
            <param name="texture2">The texture2.</param>
            <param name="texture3">The texture3.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Images.ImageEffectContext">
            <summary>
            Context for post effects.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.#ctor(SiliconStudio.Paradox.Game)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Images.ImageEffectContext"/> class.
            </summary>
            <param name="game">The game.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Images.ImageEffectContext"/> class.
            </summary>
            <param name="serviceRegistry">The service registry.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.GetTemporaryRenderTarget2D(SiliconStudio.Paradox.Graphics.TextureDescription)">
            <summary>
            Gets a <see cref="T:SiliconStudio.Paradox.Graphics.RenderTarget"/> output for the specified description.
            </summary>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.RenderTarget"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.GetTemporaryRenderTarget2D(System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32)">
            <summary>
            Gets a <see cref="T:SiliconStudio.Paradox.Graphics.RenderTarget"/> output for the specified description with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.RenderTarget"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.GetTemporaryRenderTarget2D(System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.MipMapCount,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32)">
            <summary>
            Gets a <see cref="T:SiliconStudio.Paradox.Graphics.RenderTarget"/> output for the specified description.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.RenderTarget"/> class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.GetTemporaryTexture(SiliconStudio.Paradox.Graphics.TextureDescription)">
            <summary>
            Gets a texture for the specified description.
            </summary>
            <param name="description">The description.</param>
            <returns>A texture</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.AddReferenceToTemporaryTexture(SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Increments the reference to an temporary texture.
            </summary>
            <param name="texture"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.ReleaseTemporaryTexture(SiliconStudio.Paradox.Graphics.Texture)" -->
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.CreateTexture(SiliconStudio.Paradox.Graphics.TextureDescription)">
            <summary>
            Creates a texture for output.
            </summary>
            <param name="description">The description.</param>
            <returns>Texture.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.Effects">
            <summary>
            Gets the content manager.
            </summary>
            <value>The content manager.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.GraphicsDevice">
            <summary>
            Gets or sets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.Services">
            <summary>
            Gets the services registry.
            </summary>
            <value>The services registry.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.TextureLink.Texture">
            <summary>
            The texture
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Images.ImageEffectContext.TextureLink.RefCount">
            <summary>
            The number of active reference to this texture
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Images.ImageEffectShader">
            <summary>
            Post effect using an <see cref="T:SiliconStudio.Paradox.Graphics.Effect"/> (either pdxfx or pdxsl).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectShader.#ctor(SiliconStudio.Paradox.Effects.Images.ImageEffectContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Images.ImageEffectShader"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="effectName">Name of the shader.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Images.ImageEffectShader.UpdateParameters">
            <summary>
            Updates the effect <see cref="P:SiliconStudio.Paradox.Effects.Images.ImageEffectShader.Parameters"/> from properties defined in this instance. See remarks.
            </summary>
            <exception cref="T:System.InvalidOperationException">Expecting less than 10 textures in input</exception>
            <remarks>
            By default, all the input textures will be remapped to <see cref="F:SiliconStudio.Paradox.Effects.Modules.TexturingKeys.Texture0"/>...etc.
            </remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectShader.EffectName">
            <summary>
            Gets the name of the effect.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Images.ImageEffectShader.Parameters">
            <summary>
            Gets the effect parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Images.ImageEffectShader.InternalEffectInstance">
            <summary>
            Internal class used for dynamic effect compilation.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRendererExtensions">
            <summary>
            Extensions for forward lighting on <see cref="T:SiliconStudio.Paradox.Effects.ModelRenderer"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRendererExtensions.AddLightForwardSupport(SiliconStudio.Paradox.Effects.ModelRenderer)">
            <summary>
            Adds support for forward lighting.
            </summary>
            <param name="modelRenderer">The model renderer.</param>
            <returns>ModelRenderer.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingGroupInfo.LightingParameters">
            <summary>
            The lighting parameters of this effect.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingGroupInfo.ShadowParameters">
            <summary>
            The shadow parameters of this effect
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingGroupInfo.IsLightingSetup">
            <summary>
            A flag stating if the LightingParameters should be updated.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapBlendProcessor">
            <summary>
            Keeps track of active cubemap blending locations.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapBlendProcessor.OnEntityAdding(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Engine.CubemapBlendComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapBlendProcessor.OnEntityRemoved(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Engine.CubemapBlendComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapBlendProcessor.GenerateAssociatedData(SiliconStudio.Paradox.EntityModel.Entity)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapBlendProcessor.Cubemaps">
            <summary>
            The enabled cubemap blends
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapSourceProcessor">
            <summary>
            Keeps tracks of the active cubemaps.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapSourceProcessor.OnEntityAdding(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Engine.CubemapSourceComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapSourceProcessor.OnEntityRemoved(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Engine.CubemapSourceComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapSourceProcessor.GenerateAssociatedData(SiliconStudio.Paradox.EntityModel.Entity)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Processors.CubemapSourceProcessor.Cubemaps">
            <summary>
            The active cubemaps.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer">
            <summary>
            Blends the cubemaps at the defined locations.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.Cubemaps">
            <summary>
            The key to set each cubemap parameter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.CubemapKey">
            <summary>
            The key of the cubemap.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.CubemapCount">
            <summary>
            The number of cubemap in the shader.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.UseMultipleRenderTargets">
            <summary>
            Flag to enable multiple render target.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.cubemapBlendEffects">
            <summary>
            The blend effects.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.useMultipleRenderTargets">
            <summary>
            A flag to use multiple render target to blend the cubemaps in one call.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.selectedCubemaps">
            <summary>
            Cached list of cubemaps.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.blendEffectParameters">
            <summary>
            Cached ParameterCollection used by the blending effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapBlendRenderer.Load">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Processors.DynamicLightShadowProcessor">
            <summary>
            A class allocating as many shadow map as possible without any predefined memory budget.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessor.OnEntityAdding(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Effects.Modules.Processors.EntityLightShadow)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessor.Lights">
            <summary>
            The shadow map information per entity.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessor.ShadowMapTextures">
            <summary>
            The shadow maps.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessor.ActiveShadowMapTextures">
            <summary>
            The active shadow map textures.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessor.ActiveShadowMaps">
            <summary>
            The active shadow maps.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.DynamicLightShadowProcessor.Update(SiliconStudio.Paradox.Games.GameTime)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.DynamicLightShadowProcessor.OnEntityRemoved(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Effects.Modules.Processors.EntityLightShadow)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Processors.GuillotinePacker">
            <summary>
            Implementation of a "Guillotine" packer.
            More information at http://clb.demon.fi/files/RectangleBinPack.pdf.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessorDefaultBudget">
            <summary>
            This class inherits from <see cref="T:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessorWithBudget"/> and has a budget of two 2048 x 2048 shadow map textures: one for the variance shadow maps, one for the other types.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessorWithBudget">
            <summary>
            A class handling the allocation of shadow maps with a fixed budget of shadow map textures. This class is meant to be inherited with the desired budget since it has no texture at all.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessorWithBudget.Update(SiliconStudio.Paradox.Games.GameTime)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessorWithBudget.AddShadowMapTexture(SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMapTexture,SiliconStudio.Paradox.Engine.ShadowMapFilterType)">
            <summary>
            Adds the shadow map texture to the budget of textures.
            </summary>
            <param name="shadowMapTexture">The shadow map texture.</param>
            <param name="filterType">The filtering that will be applied to this shadow.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessorWithBudget.OnSystemRemove">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Processors.LightShadowProcessorWithBudget.OnEntityRemoved(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Effects.Modules.Processors.EntityLightShadow)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap">
            <summary>
            Represents a shadow map for the <see cref="T:SiliconStudio.Paradox.Effects.Modules.Renderers.ShadowMapRenderer"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.Update">
            <summary>
            A flag stating if the shadow map should be updated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.LightDirection">
            <summary>
            The light direction.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.LightPosition">
            <summary>
            The light position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.Fov">
            <summary>
            The fov of the light.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.ShadowMapSize">
            <value>
            The size of the shadow map.
            </value>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.ShadowNearDistance">
            <summary>
            The shadow map near clipping distance.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.ShadowFarDistance">
            <summary>
            The shadow map far clipping distance.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.CascadeCount">
            <summary>
            The number of shadow map cascades.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.LightType">
            <summary>
            The light type.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.Filter">
            <summary>
            The shadow map filter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.Texture">
            <summary>
            The shadow map texture.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMap.Layers">
            <summary>
            The active layers for this shadow map.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Processors.ShadowMapTexture">
            <summary>
            Represents a texture to use with <see cref="T:SiliconStudio.Paradox.Effects.Modules.Renderers.ShadowMapRenderer"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapRenderer">
            <summary>
            Render dynamic cubemaps.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapRenderer.#ctor(SiliconStudio.Core.IServiceRegistry,SiliconStudio.Paradox.Effects.RenderPipeline,System.Boolean)">
            <summary>
            CubemapRenderer constructor.
            </summary>
            <param name="services">The IServiceRegistry.</param>
            <param name="recursivePipeline">The recursive pipeline.</param>
            <param name="singlePass">A flag stating if the cubemap should be rendered in one or 6 passes.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapRenderer.RenderInSixPasses(SiliconStudio.Paradox.Effects.RenderContext,SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Engine.CubemapSourceComponent)">
            <summary>
            Renders the cubemap in 6 passes, one for each face.
            </summary>
            <param name="context">The render context.</param>
            <param name="entity">The entity the cubemap is attached to.</param>
            <param name="component">The CubemapSource component.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.CubemapRenderer.RenderInSinglePass(SiliconStudio.Paradox.Effects.RenderContext,SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Engine.CubemapSourceComponent)">
            <summary>
            Renders the cubemap in one pass using a geometry shader.
            </summary>
            <param name="context">The render context.</param>
            <param name="entity">The entity the cubemap is attached to.</param>
            <param name="component">The CubemapSource component.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRenderer">
            <summary>
            TODO: Evaluate if it would be possible to split this class with support for different lights instead of a big fat class
            TODO: Refactor this class
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRenderer.PreRender(SiliconStudio.Paradox.Effects.RenderContext)">
            <summary>
            Filter out the inactive lights.
            </summary>
            <param name="context">The render context.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRenderer.PostRender(SiliconStudio.Paradox.Effects.RenderContext)">
            <summary>
            Clear the light lists.
            </summary>
            <param name="context">The render context.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRenderer.PreEffectUpdate(SiliconStudio.Paradox.Effects.RenderContext,SiliconStudio.Paradox.Effects.RenderMesh)">
            <summary>
            Update light lists and choose the new light configuration.
            </summary>
            <param name="context">The render context.</param>
            <param name="renderMesh">The current RenderMesh (the same as <seealso cref="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRenderer.PostEffectUpdate(SiliconStudio.Paradox.Effects.RenderContext,SiliconStudio.Paradox.Effects.RenderMesh)"/>)</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRenderer.PostEffectUpdate(SiliconStudio.Paradox.Effects.RenderContext,SiliconStudio.Paradox.Effects.RenderMesh)">
            <summary>
            Update the light values of the shader.
            </summary>
            <param name="context">The render context.</param>
            <param name="renderMesh">The current RenderMesh (the same as <seealso cref="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightForwardModelRenderer.PreEffectUpdate(SiliconStudio.Paradox.Effects.RenderContext,SiliconStudio.Paradox.Effects.RenderMesh)"/>)</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingIBLRenderer">
            <summary>
            Computes cubemaps contribution of the ambient specular.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingIBLRenderer.#ctor(SiliconStudio.Core.IServiceRegistry,System.String,SiliconStudio.Paradox.Graphics.DepthStencilBuffer,SiliconStudio.Paradox.Graphics.RenderTarget,System.Boolean)">
            <summary>
            This renderer will compute the cubemap influence on the scene. It supposes a deferred shading/rendering pipeline. Will set a RenderTarget and a DepthStencilBuffer.
            </summary>
            <param name="services">The services.</param>
            <param name="effectName">The name of the effect to create the specular ambient buffer.</param>
            <param name="depthBuffer">The depth buffer. Should be read only.</param>
            <param name="renderTarget">The render target. If null, a new render target will be created.</param>
            <param name="clearRenderTarget">A flag to enable the clear of the render target.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingIBLRenderer.Load">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingIBLRenderer.Unload">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingIBLRenderer.IBLTexture">
            <summary>
            The texture the lighting will be rendered into.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.PointLightInfos">
            <summary>
            The key linking the parameters of each point light.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.DirectLightInfos">
            <summary>
            The key linking the parameters of each directional light.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.SpotLightInfos">
            <summary>
            The key linking the parameters of each spot light.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.LightCount">
            <summary>
            The key setting the number of lights.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.#ctor(SiliconStudio.Core.IServiceRegistry,System.String,SiliconStudio.Paradox.Graphics.Texture2D,SiliconStudio.Paradox.Graphics.Texture2D)">
            <summary>
            LightPrepassRenderer constructor.
            </summary>
            <param name="services">The services.</param>
            <param name="effectName">The name of the effect used to compute lighting.</param>
            <param name="depthStencilTexture">The depth texture.</param>
            <param name="gbufferTexture">The gbuffer texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.Load">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.Unload">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.UpdateLightDatas(SiliconStudio.Paradox.Effects.RenderContext)">
            <summary>
            Update light lists and choose the new light configuration.
            </summary>
            <param name="context">The render context.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.Renderers.LightingPrepassRenderer.EndRender(SiliconStudio.Paradox.Effects.RenderContext)">
            <summary>
            Clear the lists.
            </summary>
            <param name="context">The render context.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.Renderers.ShadowMapRenderer">
            <summary>
            Handles shadow mapping.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.ShadowMapRenderer.FrustrumBasePoints">
            <summary>
            Base points for frustrum corners.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.Renderers.ShadowMapRenderer.VectorUps">
            <summary>
            The various UP vectors to try.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.ParticleBaseKeys">
            <summary>
            Keys used for the particle system.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.RenderPipelineLightingFactory.CreateDefaultForward(SiliconStudio.Core.IServiceRegistry,System.String,SiliconStudio.Core.Mathematics.Color,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a basic forward rendering pipeline.
            </summary>
            <param name="serviceRegistry">The IServiceRegistry.</param>
            <param name="effectName">The name of the main effect.</param>
            <param name="clearColor">The clear color of the final frame buffer.</param>
            <param name="useShadows">A flag stating if shadows are available in this pipeline.</param>
            <param name="ui">A flag stating if a UI renderer should be added to the pipeline.</param>
            <param name="backgroundName">The name of the background texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.RenderPipelineLightingFactory.CreateDefaultForward(SiliconStudio.Paradox.Game,System.String,SiliconStudio.Core.Mathematics.Color,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a basic forward rendering pipeline.
            </summary>
            <param name="game">The game.</param>
            <param name="effectName">The name of the main effect.</param>
            <param name="clearColor">The clear color of the final frame buffer.</param>
            <param name="useShadows">A flag stating if shadows are available in this pipeline.</param>
            <param name="ui">A flag stating if a UI renderer should be added to the pipeline.</param>
            <param name="backgroundName">The name of the background texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.RenderPipelineLightingFactory.DestroyDefaultForwardPipeline(SiliconStudio.Paradox.Game)">
            <summary>
            Destroys the forward rendering pipeline.
            </summary>
            <param name="game">The game.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.RenderPipelineLightingFactory.CreateDefaultDeferred(SiliconStudio.Core.IServiceRegistry,System.String,System.String,SiliconStudio.Core.Mathematics.Color,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a basic deferred rendering pipeline.
            </summary>
            <param name="serviceRegistry">The IServiceRegistry.</param>
            <param name="effectName">The name of the main effect.</param>
            <param name="prepassEffectName">The name of the light prepass effect.</param>
            <param name="clearColor">The clear color of the final frame buffer.</param>
            <param name="useShadows">A flag stating if shadows are available in this pipeline.</param>
            <param name="ui">A flag stating if a UI renderer should be added to the pipeline.</param>
            <param name="backgroundName">The name of the background texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.RenderPipelineLightingFactory.CreateDefaultDeferred(SiliconStudio.Paradox.Game,System.String,System.String,SiliconStudio.Core.Mathematics.Color,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a basic deferred rendering pipeline.
            </summary>
            <param name="game">The game.</param>
            <param name="effectName">The name of the main effect.</param>
            <param name="prepassEffectName">The name of the light prepass effect.</param>
            <param name="clearColor">The clear color.</param>
            <param name="useShadows">A flag stating if shadows are available in this pipeline.</param>
            <param name="backgroundName">The name of the background texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.RenderPipelineLightingFactory.DestroyDefaultDeferredPipeline(SiliconStudio.Paradox.Game)">
            <summary>
            Destroys the deferred rendering pipeline.
            </summary>
            <param name="game">The game.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.LightKeys">
            <summary>
            Keys used for Lighting plugin.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.LightKeys.LightColor">
            <summary>
            Diffuse color.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.LightKeys.LightRadius">
            <summary>
            Light radius for point light.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.LightKeys.LightIntensity">
            <summary>
            Light intensity..
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.LightKeys.LightAttenuationCutoff">
            <summary>
            Light cutoff for point light.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.LightKeys.LightPosition">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.LightKeys.LightDirection">
            <summary>
            Light direction.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.LightKeys.LightDirectionVS">
            <summary>
            Light direction VS.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.GBufferKeys">
            <summary>
            Keys used for GBuffer settings.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.GBufferKeys.Texture">
            <summary>
            The GBuffer render target key.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.ShadowMapKeys">
            <summary>
            Keys used for shadow mapping.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.ShadowMapKeys.DepthTexture">
            <summary>
            Depth sampling texture.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.ShadowMapKeys.Texture">
            <summary>
            Final shadow map texture.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.ShadowMapKeys.DistanceMax">
            <summary>
            Maximum distance used by a shadow map.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.SSAOKeys">
            <summary>
            Keys used for texturing.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.SSAOKeys.Texture">
            <summary>
            Source texture.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.SSAOKeys.Intensity">
            <summary>
            Intensity of the ambient occlusion.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.SSAOKeys.SamplingRadius">
            <summary>
            Size of the sampling radius where random samples will be taken.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.SSAOKeys.Scale">
            <summary>
            Scale distance between occluder and occludee.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.SSAOKeys.Bias">
            <summary>
            Width of the occlusion cone for occludee
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.SSAOKeys.SelfOcclusion">
            <summary>
            Self occlusion factors. TODO comment this field.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.PostEffectKeys.MixCoefficients">
            <summary>
            Blur coefficients from [0] to [4].
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.TessellationKeys.DesiredTriangleSize">
            <summary>
            Desired maximum triangle size in screen space during tessellation.
            </summary>
        </member>
    </members>
</doc>
